[1mdiff --git a/src/rzz/cesty.h b/src/rzz/cesty.h[m
[1mindex 36ff339..a3071b1 100644[m
[1m--- a/src/rzz/cesty.h[m
[1m+++ b/src/rzz/cesty.h[m
[36m@@ -30,8 +30,6 @@[m [mpublic:[m
     int navZnak;[m
     int num;[m
     bool posun;[m
[31m-    //Tblok *navestidlo;[m
[31m-    //QList<TblokU> useky;[m
 };[m
 [m
 class Tcesty[m
[1mdiff --git a/src/rzz/dohledcesty.cpp b/src/rzz/dohledcesty.cpp[m
[1mindex 0c51609..5407def 100644[m
[1m--- a/src/rzz/dohledcesty.cpp[m
[1m+++ b/src/rzz/dohledcesty.cpp[m
[36m@@ -9,18 +9,18 @@[m [mTdohledCesty::TdohledCesty(){[m
 }[m
 [m
 void TdohledCesty::postavCestu(int i) {[m
[31m-    struct cestaPodDohledem *nc = new cestaPodDohledem(); // nov√° cesta[m
[32m+[m[32m    cestaPodDohledem *nc = new cestaPodDohledem(); // nov√° cesta[m
[32m+[m[32m    Tcesta *c;[m
[32m+[m[32m    // najdeme spr√°vnou cestu[m
[32m+[m[32m    c = cesty->cesty.at(i);[m
     nc->num = i;[m
     nc->stav = scStavime;[m
[32m+[m[32m    nc->pCesta = c;[m
     nc->vlakCelo = -1;[m
     nc->vlakKonec = -1;[m
     // p≈ôid√°me na seznam platn√Ωch cest[m
     cestyPostavene.append(nc);[m
 [m
[31m-    Tcesta *c;[m
[31m-    // najdeme spr√°vnou cestu[m
[31m-    c = cesty->cesty.at(i);[m
[31m-[m
     // nastav√≠ polohy prvk≈Øm v cestƒõ[m
     //sepne VOP/VOM a simuluje v√Ωmƒõnov√° automatick√° rel√©[m
     for (struct Tcesta::Tvyh v : c->polohy) {[m
[36m@@ -52,17 +52,36 @@[m [mvoid TdohledCesty::t3C()[m
 [m
 }[m
 [m
[31m-bool TdohledCesty::kontrolaCelistvostiCesty(Tcesta *c, bool cestaJizExistuje)[m
[32m+[m[32m/****************************************************************************/[m
[32m+[m[32m// *c - cesta co chceme zkontrolovat[m
[32m+[m[32m// cestaJizExistuje - rozli≈°uje zda chceme cestu postavit, nebo kontrolujeme podm√≠nky DN[m
[32m+[m[32mbool TdohledCesty::cestaPodDohledem::kontrolaCelistvostiCesty(bool cestaJizExistuje)[m
 {[m
[32m+[m[32m    // p≈ôedpokl√°d√°me, ≈æe je v≈°e ok, jak√°koliv chyba to ale zmƒõn√≠[m
     bool stavOK = true;[m
[32m+[m[32m    // nulov√°n√≠ UPO - sestav√≠ se zmova kontrolou[m
[32m+[m[32m    this->upo.clear();[m
[32m+[m[32m    // najdeme si cestu[m
[32m+[m[32m    Tcesta *c = cesty->cesty.at(this->num);[m
[32m+[m
[32m+[m[32m    // kontrola blok≈Ø v cestƒõ[m
     for(Tblok *blok : c->bloky) {[m
         if (blok->typ == Tblok::btS) {[m
             // blok S - kontrolujeme volnost a z√°vƒõr[m
[31m-            if (blok->r[TblokS::J]) stavOK = false;[m
[32m+[m[32m            if (blok->r[TblokS::J]) {[m
[32m+[m[32m                stavOK = false;[m
[32m+[m[32m                this->upo.append(QString("obsaz. %1").arg(blok->name));[m
[32m+[m[32m            }[m
             if (cestaJizExistuje) {[m
[31m-                if (!blok->r[TblokS::Z]) stavOK = false; // zavƒõr mus√≠ b√Ωt, kdy≈æ cesta ji≈æ je postaven√°[m
[32m+[m[32m                if (!blok->r[TblokS::Z]) {[m
[32m+[m[32m                    stavOK = false; // zavƒõr mus√≠ b√Ωt, kdy≈æ cesta ji≈æ je postaven√°[m
[32m+[m[32m                    this->upo.append(QString("ne z√°v. %1").arg(blok->name));[m
[32m+[m[32m                }[m
             } else {[m
[31m-                if (blok->r[TblokS::Z]) stavOK = false; // z√°vƒõr nesm√≠ b√Ωt, kdy≈æ cestu stav√≠me[m
[32m+[m[32m                if (blok->r[TblokS::Z]) {[m
[32m+[m[32m                    stavOK = false; // z√°vƒõr nesm√≠ b√Ωt, kdy≈æ cestu stav√≠me[m
[32m+[m[32m                    this->upo.append(QString("z√°v. %1").arg(blok->name));[m
[32m+[m[32m                }[m
             }[m
         }[m
         if (blok->typ == Tblok::btK) {[m
[36m@@ -71,27 +90,70 @@[m [mbool TdohledCesty::kontrolaCelistvostiCesty(Tcesta *c, bool cestaJizExistuje)[m
                 // cesta je postaven√°, v√Ωluka mus√≠ nƒõjak√° b√Ωt[m
                 if (c->posun) {[m
                     // u posunu kontrolujeme v√Ωluky i K1, K2[m
[31m-                    if (!(blok->r[TblokK::X1]) || !(blok->r[TblokK::X2])) stavOK = false; // mus√≠ b√Ωt aspo≈à 1 v√Ωluka[m
[32m+[m[32m                    if (!(blok->r[TblokK::X1]) || !(blok->r[TblokK::X2])) {[m
[32m+[m[32m                        stavOK = false; // mus√≠ b√Ωt aspo≈à 1 v√Ωluka[m
[32m+[m[32m                        this->upo.append(QString("ne v√Ωluky %1").arg(blok->name));[m
[32m+[m[32m                    }[m
                 } else {[m
                     // vlakov√° cesta se d√≠v√° jen na v√Ωluky[m
                     //if (!(blok->r[TblokK::X1]) || !(blok->r[TblokK::X2])) stavOK = false; // mus√≠ b√Ωt aspo≈à 1 v√Ωluka[m
                     // kontrolujeme volnost (u VC)[m
[31m-                    if (blok->r[TblokK::J]) stavOK = false;[m
[32m+[m[32m                    if (blok->r[TblokK::J]) {[m
[32m+[m[32m                        stavOK = false;[m
[32m+[m[32m                        this->upo.append(QString("obsaz. %1").arg(blok->name));[m
[32m+[m[32m                    }[m
                 }[m
             } else {[m
                 // stav√≠me cestu, vyluky nesm√≠ b√Ωt[m
                 if (c->posun) {[m
                     // u posunu kontrolujeme v√Ωluky i K1, K2[m
[31m-                    if ((blok->r[TblokK::X1] && !(blok->r[TblokK::K1])) || (blok->r[TblokK::X2] && !(blok->r[TblokK::K2]))) stavOK = false;[m
[32m+[m[32m                    if ((blok->r[TblokK::X1] && !(blok->r[TblokK::K1])) || (blok->r[TblokK::X2] && !(blok->r[TblokK::K2]))) {[m
[32m+[m[32m                        stavOK = false;[m
[32m+[m[32m                        this->upo.append(QString("proti ces. %1").arg(blok->name));[m
[32m+[m[32m                    }[m
                 } else {[m
                     // vlakov√° cesta se d√≠v√° jen na v√Ωluky[m
[31m-                    if (blok->r[TblokK::X1] || blok->r[TblokK::X2]) stavOK = false;[m
[32m+[m[32m                    if (blok->r[TblokK::X1] || blok->r[TblokK::X2]) {[m
[32m+[m[32m                        stavOK = false;[m
[32m+[m[32m                        this->upo.append(QString("proti ces. %1").arg(blok->name));[m
[32m+[m[32m                    }[m
                     // kontrolujeme volnost (u VC)[m
[31m-                    if (blok->r[TblokK::J]) stavOK = false;[m
[32m+[m[32m                    if (blok->r[TblokK::J]) {[m
[32m+[m[32m                        stavOK = false;[m
[32m+[m[32m                        this->upo.append(QString("obsaz %1").arg(blok->name));[m
[32m+[m[32m                    }[m
                 }[m
             }[m
         }[m
     };[m
[32m+[m[32m    // kontrola poloh v√Ωmƒõn[m
[32m+[m[32m    for(struct Tcesta::Tvyh vyh: c->polohy) {[m
[32m+[m[32m        // blokV - mus√≠ b√Ωt dohled polohy[m
[32m+[m[32m        if (vyh.pBlok->typ == Tblok::btV) {[m
[32m+[m[32m            if (!(vyh.minus) && (!(static_cast<TblokV*>(vyh.pBlok)->DP))) {[m
[32m+[m[32m                stavOK = false;[m
[32m+[m[32m                this->upo.append(QString("ne dohl+ %1").arg(vyh.pBlok->name));[m
[32m+[m[32m            }[m
[32m+[m[32m            if ( (vyh.minus) && (!(static_cast<TblokV*>(vyh.pBlok)->DM))) {[m
[32m+[m[32m                stavOK = false;[m
[32m+[m[32m                this->upo.append(QString("ne dohl- %1").arg(vyh.pBlok->name));[m
[32m+[m[32m            }[m
[32m+[m[32m            if (cestaJizExistuje) {[m
[32m+[m[32m                // pro kontrolu n√°vstidla mus√≠ b√Ωt z√°vƒõr[m
[32m+[m[32m                if (!(static_cast<TblokV*>(vyh.pBlok)->r[TblokV::rel::Z])) {[m
[32m+[m[32m                    stavOK = false;[m
[32m+[m[32m                    this->upo.append(QString("ne z√°v. %1").arg(vyh.pBlok->name));[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        // blokEMZ - nesm√≠ b√Ωt uvolnƒõn kl√≠ƒç[m
[32m+[m[32m        if (vyh.pBlok->typ == Tblok::btEMZ) {[m
[32m+[m[32m            if ((static_cast<TblokEMZ*>(vyh.pBlok)->r[TblokEMZ::rel::UK])) {[m
[32m+[m[32m                stavOK = false;[m
[32m+[m[32m                this->upo.append(QString("z√°mek %1").arg(vyh.pBlok->name));[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
     return stavOK;[m
 }[m
 [m
[36m@@ -172,6 +234,18 @@[m [mvoid TdohledCesty::evaluate()[m
             }[m
         }[m
 [m
[32m+[m[32m        // stisknut√≠ tlaƒç√≠tka m≈Ø≈æe obnovit DN, kdy≈æ je spr√°vn√° situace[m
[32m+[m[32m        if (c->tlacitka[0]->mtbIns[TblokTC::mtbeIns::mtbInVolba].value()) {[m
[32m+[m[32m            // poƒç√°teƒçn√≠ tlaƒç√≠tko je stisknut√©[m
[32m+[m[32m            if (d->stav == scPrujezdVlaku) {[m
[32m+[m[32m                // jsme v re≈æimu kontroly podm√©nek pro DN[m
[32m+[m[32m                if (d->kontrolaCelistvostiCesty(true)) {[m
[32m+[m[32m                    // obnov√≠me cestu[m
[32m+[m[32m                    d->stav = scKontrolaDN;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
         // chov√°n√≠ podle stavu cesty[m
         switch (d->stav) {[m
         case scStavime: // kontrola v√Ωmƒõn[m
[36m@@ -217,7 +291,7 @@[m [mvoid TdohledCesty::evaluate()[m
             break;[m
         case scZavery: // kontrola volnosti a pad√°n√≠ z√°vƒõr≈Ø √∫sek≈Ø[m
             // kontrola volnosti JC[m
[31m-            stavOK = kontrolaCelistvostiCesty(c, false);[m
[32m+[m[32m            stavOK = d->kontrolaCelistvostiCesty(false);[m
             if (stavOK) {[m
                 // √∫seky jsou voln√© a nemaj√≠ z√°vƒõr z jin√© cesty[m
                 log(QString("dohled: provedeme z√°vƒõr cel√© cesty ƒç√≠slo %1").arg(d->num), logging::LogLevel::Info);[m
[36m@@ -259,13 +333,27 @@[m [mvoid TdohledCesty::evaluate()[m
                         static_cast<TblokEMZ*>(odv.pBlokVymena)->odvratneBloky.append(odv.pBlokUsek);[m
                     }[m
                 }[m
[31m-                log(QString("dohled: zhasne tlaƒç√≠tka"), logging::LogLevel::Debug);[m
[32m+[m[32m                log(QString("dohled: zhasne tlaƒç√≠tka cesty"), logging::LogLevel::Debug);[m
                 zhasniTlacitka(c->num);[m
[31m-                d->stav = scDN;[m
[32m+[m[32m                d->stav = scKontrolaDN;[m
[32m+[m[32m            }[m
[32m+[m[32m            break;[m
[32m+[m[32m        case scKontrolaDN:[m
[32m+[m[32m            stavOK = d->kontrolaCelistvostiCesty(true);[m
[32m+[m[32m            if (stavOK) {[m
[32m+[m[32m                if (c->Navestidlo) {[m
[32m+[m[32m                    c->Navestidlo->navestniZnak = urciNavest(c->navZnak, c->nasledneNavestidlo);[m
[32m+[m[32m                    c->Navestidlo->r[TblokQ::N] = true;[m
[32m+[m[32m                    d->vlakCelo = -1;[m
[32m+[m[32m                    d->vlakKonec = -1;[m
[32m+[m[32m                    d->vlakEvidenceCelo = false;[m
[32m+[m[32m                    d->vlakEvidenceKonec = false;[m
[32m+[m[32m                    d->stav = scDN;[m
[32m+[m[32m                }[m
             }[m
             break;[m
         case scDN:[m
[31m-            stavOK = kontrolaCelistvostiCesty(c,true);[m
[32m+[m[32m            stavOK = d->kontrolaCelistvostiCesty(true);[m
             if (stavOK) {[m
                 if (c->Navestidlo) {[m
                     c->Navestidlo->navestniZnak = urciNavest(c->navZnak, c->nasledneNavestidlo);[m
[36m@@ -277,9 +365,12 @@[m [mvoid TdohledCesty::evaluate()[m
                     c->Navestidlo->r[TblokQ::N] = false;[m
                 }[m
                 d->stav = scPrujezdVlaku;[m
[32m+[m[32m                d->vlakCelo=0;[m
             }[m
             break;[m
         case scPrujezdVlaku:[m
[32m+[m[32m            // ToDo: dodƒõlat logiku ƒçela a koncevlaku[m
[32m+[m[32m            // teƒè je to uplnƒõ blbƒõ, ƒçelo se pohybuje sp√≠≈° jako konec[m
             if (d->vlakCelo >= 0) {[m
                 if ((d->vlakCelo+1) < c->bloky.count()) {[m
                     // zj√≠st√≠ obsazen√≠ u ƒçela vlaku[m
[36m@@ -294,6 +385,7 @@[m [mvoid TdohledCesty::evaluate()[m
                     }[m
                     // vyhodnot√≠ posun ƒçela vlaku[m
                     if (obv1 && obv2) d->vlakEvidenceCelo = true;[m
[32m+[m
                     if (!obv1 && obv2 && d->vlakEvidenceCelo) {[m
                         d->vlakEvidenceCelo = false;[m
                         d->vlakCelo++;[m
[36m@@ -315,13 +407,9 @@[m [mvoid TdohledCesty::evaluate()[m
             tc->r[TblokTC::PO] = false;[m
             tc->r[TblokTC::TK] = false;[m
         }[m
[31m-[m
[31m-[m
         // a smazat cestu[m
         cestyPostavene.removeOne(d);[m
         delete d;[m
[31m-[m
[31m-[m
     }[m
 }[m
 [m
[1mdiff --git a/src/rzz/dohledcesty.h b/src/rzz/dohledcesty.h[m
[1mindex 943ca49..b277602 100644[m
[1m--- a/src/rzz/dohledcesty.h[m
[1m+++ b/src/rzz/dohledcesty.h[m
[36m@@ -19,7 +19,7 @@[m [mpublic:[m
     enum stavCesty {[m
         scStavime = 0,[m
         scZavery = 1,[m
[31m-        //scKontrolaDN = 2,[m
[32m+[m[32m        scKontrolaDN = 2,[m
         scDN = 3,[m
         scPrujezdVlaku = 4,[m
         scRC = 5[m
[36m@@ -33,13 +33,17 @@[m [mpublic:[m
 [m
     QString stavCesty2QString(stavCesty sc);[m
 [m
[31m-    struct cestaPodDohledem {[m
[32m+[m[32m    class cestaPodDohledem {[m
[32m+[m[32m    public:[m
         enum stavCesty stav; // akktu√°ln√≠ stav cesty[m
         int num; // ƒç√≠slo cesty (id)[m
[32m+[m[32m        Tcesta *pCesta;[m
         int vlakCelo; // po≈ôadov√© ƒç√≠slo bloku, kde je ƒçelo vlaku[m
         int vlakKonec; // po≈ôadov√© ƒç√≠slo bloku, kde je konec vlaku[m
         bool vlakEvidenceCelo;[m
         bool vlakEvidenceKonec;[m
[32m+[m[32m        QStringList upo;[m
[32m+[m[32m        bool kontrolaCelistvostiCesty(bool cestaJizExistuje);[m
     };[m
 [m
     QList<struct cestaPodDohledem *> cestyPostavene;[m
[36m@@ -53,7 +57,6 @@[m [mpublic:[m
     void zhasniTlacitka(int i); // ƒç√≠slo cesty, kde zhas√≠n√°me[m
 [m
     int urciNavest(int navZnak, TblokQ *nasledneNavestidlo = nullptr);[m
[31m-    bool kontrolaCelistvostiCesty(Tcesta *c, bool cestaJizExistuje);[m
 };[m
 [m
 extern TdohledCesty dohledCesty;[m
[1mdiff --git a/src/rzz/voliciskupina.cpp b/src/rzz/voliciskupina.cpp[m
[1mindex 87f641b..8c1c331 100644[m
[1m--- a/src/rzz/voliciskupina.cpp[m
[1m+++ b/src/rzz/voliciskupina.cpp[m
[36m@@ -24,6 +24,17 @@[m [mbool Tvoliciskupina::vstupZmena(TblokTC *p, bool state)[m
         //log(QString("cesty: zmƒõna tlaƒç√≠tka %1").arg(p->name), logging::LogLevel::Info);[m
         if (tlacitkaAktivni.isEmpty()) {[m
             // prvn√≠ tlaƒç√≠tko cesty[m
[32m+[m[32m            // nejprve ovƒõ≈ô√≠me, zda u≈æ odsud cesta nevede, kter√° m√° ≈ôe≈°it tlaƒç√≠tko[m
[32m+[m[32m            for (TdohledCesty::cestaPodDohledem *cdoh : dohledCesty.cestyPostavene) {[m
[32m+[m[32m                if (cdoh->pCesta->tlacitka.first() == p) {[m
[32m+[m[32m                    // je postaven√° cesta od tohoto tlaƒç√≠tka[m
[32m+[m[32m                    if (cdoh->stav == TdohledCesty::scDN) {[m
[32m+[m[32m                        // nedƒõl√°me nic[m
[32m+[m[32m                        return false;[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            // zj√≠st√≠me, jak√© cesty u tohoto tlaƒç√≠tka zaƒç√≠naj√≠[m
             cestyMozne.clear();[m
             for (Tcesta *i : cesty->cesty) {[m
                 //log(QString("cesty: hled√°n√≠ %1 == %2").arg(p->name).arg(i->tlacitka.at(0)->name), logging::LogLevel::Info);[m
[1mdiff --git a/src/rzz71.cpp b/src/rzz71.cpp[m
[1mindex 485ddae..b07015a 100644[m
[1m--- a/src/rzz71.cpp[m
[1m+++ b/src/rzz71.cpp[m
[36m@@ -80,8 +80,10 @@[m [mvoid TRZZ71::readCommand(QString cmd)[m
             term(QString("Postaven√© cesty = %1").arg(dohledCesty.cestyPostavene.count()));[m
             for (struct TdohledCesty::cestaPodDohledem *cpd : dohledCesty.cestyPostavene) {[m
                 term(QString(" - %1 -> stav %2-%3 (vlak v bloku ƒç. %4 a≈æ %5)").arg(cpd->num).arg(cpd->stav).arg(dohledCesty.stavCesty2QString(cpd->stav)).arg(cpd->vlakCelo).arg((cpd->vlakKonec)));[m
[32m+[m[32m                for (QString upo1 : cpd->upo) {[m
[32m+[m[32m                    term(tr("   UPO - %1").arg(upo1));[m
[32m+[m[32m                }[m
             }[m
[31m-[m
         }[m
         if (cmd == 'b') { // bloky[m
             if (cmdList.size() > 1) {[m
[36m@@ -143,7 +145,8 @@[m [mvoid TRZZ71::readCommand(QString cmd)[m
                     case Tblok::btQ:[m
                         term(QString("blok Q"));[m
                         term(QString(" - N = %1").arg(b->r[TblokQ::N]));[m
[31m-                        term(QString(" - znak = %1").arg(static_cast<TblokQ*>(b)->navestniZnak));[m
[32m+[m[32m                        term(QString(" - k√≥d n√°vƒõsti = %1").arg(static_cast<TblokQ*>(b)->navestniZnak));[m
[32m+[m[32m                        break;[m
                     default:[m
                         term(QString("blok neum√≠m vypsat"));[m
                         break;[m
[36m@@ -153,10 +156,7 @@[m [mvoid TRZZ71::readCommand(QString cmd)[m
                 }[m
             }[m
         }[m
[31m-[m
     }[m
[31m-[m
[31m-[m
 }[m
 [m
 void TRZZ71::init()[m
